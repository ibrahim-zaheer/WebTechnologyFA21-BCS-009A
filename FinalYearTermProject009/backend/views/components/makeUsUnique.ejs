<style>
    .animated-card {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 1s ease-out, transform 1s ease-out;
}

.animated-card.visible {
    opacity: 1;
    transform: translateY(0);
}

</style>
<div class="container">
    <div style="background-color: salmon;">
        <div class="row justify-content-center"> <!-- Center align the row content -->
            <div class="col text-center"> <!-- Center align the column content -->
                <h2>What We Do</h2>
                <h1>What Makes Us Unique</h1>
                <p>When You Join Us, Youâ€™re Joining A Community Focused On Caring About Animals And Our Planet, </p>
                <p>Improving Livelihoods For Farmers, And Sharing Better Meals Together.</p>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="card animated-card" style="background-color: green;">
                    <div class="card-body text-center">
                        <img src="images/icons/quality.png" style="width: 50%; margin: 0 auto;" class="card-img-top" alt="Icon"> <!-- Image icon with margin auto -->
                        <h1 class="card-title">HIGH-QUALITY MEAT</h1>
                        <p class="card-text">100% grass-fed beef, free-range organic and wild-caught seafood</p>
                        <p class="card-text">chicken, humanely raised ,</p>
                        <p class="card-text">and wild-caught seafood.</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card animated-card" style="background-color: red;">
                    <div class="card-body text-center">
                        <img src="images/icons/value.png" style="width: 50%; margin: 0 auto;" class="card-img-top" alt="Icon"> <!-- Image icon with margin auto -->
                        <h1 class="card-title">UNBEATABLE VALUE</h1>
                        <p class="card-text">Get a range of high-quality cuts,</p>
                        <p class="card-text">from ground beef to filet mignon,</p>
                        <p class="card-text">at an amazing value.</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card animated-card" style="background-color: green;">
                    <div class="card-body text-center">
                        <img src="images/icons/arrows.png" style="width: 50%; margin: 0 auto;" class="card-img-top" alt="Icon"> <!-- Image icon with margin auto -->
                        <h1 class="card-title">COMPLETE FLEXIBILITY</h1>
                        <p class="card-text">100% grass-fed beef, free-range organic and wild-caught seafood</p>
                        <p class="card-text">chicken, humanely raised ,</p>
                        <p class="card-text">and wild-caught seafood.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll('.animated-card');
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.classList.add('visible');
                }, index * 500); // Delay each card by 500ms
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    cards.forEach(card => {
        observer.observe(card);
    });
});
document.addEventListener("DOMContentLoaded", () => {
    const images = document.querySelectorAll('.animated-image');
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry, index) => {
            if (entry.isIntersecting) {
                setTimeout(() => {
                    entry.target.classList.add('visible');
                }, index * 500); // Delay each image by 500ms
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    images.forEach(img => {
        observer.observe(img);
    });
});

</script>